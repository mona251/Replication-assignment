# Automatically generated by Pynguin.
import pytest
import string_utils.validation as module_0
import codecs as module_1
import builtins as module_2

def test_case_0():
    str_0 = "\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    "
    bool_0 = module_0.is_isbn_10(str_0)
    assert bool_0 is False
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8

@pytest.mark.xfail(strict=True)
def test_case_9():
    value_error_0 = module_2.ValueError()
    str_0 = 'LHe(SF%!\r"'
    bool_0 = module_0.is_isbn(str_0)
    assert bool_0 is False
    assert value_error_0 is not None
    assert module_2.None is None
    assert module_2.False is False
    assert module_2.True is True
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8
    str_1 = "^3U\\"
    bool_1 = module_0.is_full_string(bool_0)
    assert bool_1 is False
    int_0 = module_0.words_count(str_1)
    assert int_0 == 1
    bool_2 = module_0.is_string(value_error_0)
    assert bool_2 is False
    str_2 = "!Cay2D"
    str_3 = "{7ax#p9"
    int_1 = module_0.words_count(str_3)
    assert int_1 == 2
    bool_3 = False
    bool_4 = module_0.is_full_string(str_0)
    assert bool_4 is True
    str_4 = "8"
    bool_5 = module_0.is_camel_case(bool_0)
    assert bool_5 is False
    bool_6 = module_0.is_ip_v4(str_0)
    assert bool_6 is False
    bool_7 = True
    bool_8 = module_0.is_palindrome(str_4, ignore_case=bool_7)
    assert bool_8 is True
    bool_9 = module_0.is_integer(str_4)
    assert bool_9 is True
    bool_10 = module_0.is_isbn_13(str_2, bool_3)
    assert bool_10 is False
    none_type_0 = None
    bool_11 = module_0.is_ip(str_2)
    assert bool_11 is False
    module_1.StreamRecoder(int_1, bool_1, bool_4, bool_5, str_4, none_type_0)


def test_case_10():
    str_0 = "X"
    bool_0 = module_0.is_integer(str_0)
    assert bool_0 is False
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8

def test_case_20():
    none_type_0 = None
    bool_0 = module_0.is_json(none_type_0)
    assert bool_0 is False
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8

def test_case_26():
    str_0 = "roman_encode"
    str_1 = ""
    bool_0 = module_0.is_ip(str_0)
    assert bool_0 is False
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8
    bool_1 = module_0.is_ip_v4(str_1)
    assert bool_1 is False
    bool_2 = module_0.is_email(str_0)
    assert bool_2 is False
    bool_3 = module_0.contains_html(str_1)
    assert bool_3 is False
    str_2 = "do!Cg$[!i"
    bool_4 = True
    bool_5 = module_0.is_isbn_10(str_2, bool_4)
    assert bool_5 is False
    bool_6 = module_0.is_integer(str_1)
    assert bool_6 is False
    bool_7 = module_0.is_isogram(str_0)
    assert bool_7 is False
    str_3 = "3(pkRw=\nC"
    bool_8 = module_0.is_pangram(str_2)
    assert bool_8 is False
    str_4 = "G4ma:IP#O\rdS&"
    bool_9 = False
    bool_10 = module_0.is_palindrome(str_3, ignore_case=bool_9)
    assert bool_10 is False
    bool_11 = module_0.is_isbn(str_4)
    assert bool_11 is False
    bool_12 = module_0.is_json(str_0)
    assert bool_12 is False
    bool_13 = module_0.is_credit_card(bool_10)
    assert bool_13 is False
    bool_14 = module_0.is_url(str_3)
    assert bool_14 is False

def test_case_34():
    str_0 = ",@pJ Vu"
    int_0 = module_0.words_count(str_0)
    assert int_0 == 2
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8

def test_case_38():
    str_0 = "X"
    bool_0 = module_0.is_palindrome(str_0)
    assert bool_0 is True
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8


def test_case_39():
    str_0 = "1@ICt62C$dV _W]!){\nw"
    bool_0 = module_0.is_string(str_0)
    str_1 = "wC^x%ZBWz\x0c"
    bool_1 = module_0.is_isbn(str_1)
    assert bool_1 is False
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8
    bool_2 = module_0.is_email(str_0)
    assert bool_2 is False
    str_2 = ")Wk5&;Vwjr^"
    bool_3 = module_0.is_snake_case(str_0)
    assert bool_3 is False
    bool_4 = module_0.is_isogram(str_0)
    assert bool_4 is False
    str_3 = "3:p=kRw=\nC"
    bool_5 = True
    bool_6 = module_0.is_palindrome(str_0, bool_0, bool_5)
    assert bool_6 is False
    bool_7 = module_0.is_ip(bool_3)
    assert bool_7 is False
    bool_8 = module_0.is_palindrome(str_3, bool_2)
    assert bool_8 is False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    assert i_s_b_n_checker_0.input_string == ")Wk5&;Vwjr^"
    bool_9 = module_0.is_json(str_2)
    assert bool_9 is False
    float_0 = 295.529
    bool_10 = module_0.is_url(str_1, float_0)
    assert bool_10 is False

def test_case_43():
    str_0 = "QsNAo1:8Avr2TI"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    assert i_s_b_n_checker_0.input_string == "QsNAo1:8Avr2TI"
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8
    bool_0 = module_0.is_url(str_0, i_s_b_n_checker_0)
    assert bool_0 is False
    bool_1 = module_0.is_slug(str_0, str_0)
    assert bool_1 is False
    bool_2 = i_s_b_n_checker_0.is_isbn_13()
    assert bool_2 is False
    bool_3 = module_0.is_ip_v4(i_s_b_n_checker_0)
    assert bool_3 is False
    bool_4 = module_0.is_email(i_s_b_n_checker_0)
    assert bool_4 is False
    bool_5 = i_s_b_n_checker_0.is_isbn_10()
    assert bool_5 is False
    str_1 = "slugify"
    bool_6 = False
    bool_7 = module_0.is_isbn_13(str_1, bool_6)
    assert bool_7 is False
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    assert buffered_incremental_decoder_0.errors == "strict"
    assert buffered_incremental_decoder_0.buffer == b""
    assert module_1.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_1.BOM_LE == b"\xff\xfe"
    assert module_1.BOM_UTF16_LE == b"\xff\xfe"
    assert module_1.BOM_BE == b"\xfe\xff"
    assert module_1.BOM_UTF16_BE == b"\xfe\xff"
    assert module_1.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_1.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_1.BOM == b"\xff\xfe"
    assert module_1.BOM_UTF16 == b"\xff\xfe"
    assert module_1.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_1.BOM32_LE == b"\xff\xfe"
    assert module_1.BOM32_BE == b"\xfe\xff"
    assert module_1.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_1.BOM64_BE == b"\x00\x00\xfe\xff"
    bool_8 = True
    bool_9 = module_0.is_uuid(buffered_incremental_decoder_0, bool_8)
    assert bool_9 is False
    bool_10 = module_0.is_json(bool_3)
    assert bool_10 is False
    bool_11 = module_0.contains_html(str_0)
    assert bool_11 is False
    bool_12 = module_0.is_uuid(bool_5)
    assert bool_12 is False
    list_0 = [bool_10, str_1, str_0]
    value_error_0 = module_2.ValueError(*list_0)
    assert value_error_0 is not None
    assert module_2.None is None
    assert module_2.False is False
    assert module_2.True is True
    bool_13 = module_0.is_isbn_13(str_1)
    assert bool_13 is False
    bool_14 = module_0.is_isbn(str_0)
    assert bool_14 is False
    str_2 = "2dk$%phP|`\\GZglV-ZmY"
    bool_15 = module_0.is_decimal(str_2)
    assert bool_15 is False

def test_case_48():
    str_0 = "1@ICt62C$dV _W]!){\nw"
    bool_0 = module_0.is_string(str_0)
    str_1 = "wC^x%ZBWz\x0c"
    bool_1 = module_0.is_email(str_0)
    assert bool_1 is False
    assert (
        module_0.URLS_RAW_STRING
        == "([a-z-]+://)([a-z_\\d-]+:[a-z_\\d-]+@)?(www\\.)?((?<!\\.)[a-z\\d]+[a-z\\d.-]+\\.[a-z]{2,6}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost)(:\\d{2,})?(/[a-z\\d_%+-]*)*(\\.[a-z\\d_%+-]+)*(\\?[a-z\\d_+%-=]*)?(#\\S*)?"
    )
    assert (
        module_0.EMAILS_RAW_STRING
        == "[a-zA-Z\\d._\\+\\-'`!%#$&*/=\\?\\^\\{\\}\\|~\\\\]+@[a-z\\d-]+\\.?[a-z\\d-]+\\.[a-z]{2,4}"
    )
    assert len(module_0.CREDIT_CARDS) == 6
    assert len(module_0.PRETTIFY_RE) == 8
    str_2 = ")Wk5&;Vwjr^"
    bool_2 = module_0.is_snake_case(str_0)
    assert bool_2 is False
    bool_3 = module_0.is_isogram(str_0)
    assert bool_3 is False
    bool_4 = module_0.is_palindrome(str_0, bool_0, bool_3)
    assert bool_4 is False
    str_3 = '\'\t?H+"""@'
    bool_5 = module_0.is_decimal(str_3)
    assert bool_5 is False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_2)
    assert i_s_b_n_checker_0.input_string == "1@ICt62C$dV _W]!){\nw"
    bool_6 = module_0.is_palindrome(str_2, bool_1)
    assert bool_6 is False
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_0)
    assert i_s_b_n_checker_1.input_string == "1@ICt62C$dV _W]!){\nw"
    bool_7 = module_0.is_json(str_3)
    assert bool_7 is False
    float_0 = 295.529
    bool_8 = module_0.is_url(str_1, float_0)
    assert bool_8 is False
