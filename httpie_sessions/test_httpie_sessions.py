# Automatically generated by Pynguin.
import pytest
import httpie.sessions as module_0
import httpie.cli.dicts as module_1


def test_case_0():
    str_0 = ".H/j/k#"
    session_0 = module_0.get_httpie_session(str_0, str_0, str_0, str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"password": None, "type": None, "username": None},
        "__meta__": {
            "about": "HTTPie session file",
            "help": "https://httpie.org/doc#sessions",
            "httpie": "2.4.0",
        },
    }
    assert len(module_0.plugin_manager) == 5
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "]sahe"
    module_0.get_httpie_session(str_0, str_0, str_0, str_0)


def test_case_2():
    str_0 = "`EH7~m9+e"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    request_headers_dict_0 = module_1.RequestHeadersDict(**dict_0)
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    none_type_0 = session_0.update_headers(request_headers_dict_0)
    assert len(request_headers_dict_0) == 1
    assert session_0 == {
        "headers": {"`EH7~m9+e": "`EH7~m9+e"},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5


def test_case_3():
    str_0 = "wg"
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    none_type_0 = session_0.remove_cookies(session_0)
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5

def test_case_6():
    str_0 = "cookie"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    request_headers_dict_0 = module_1.RequestHeadersDict(**dict_0)
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    none_type_0 = session_0.update_headers(request_headers_dict_0)
    assert len(request_headers_dict_0) == 0
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "]saht"
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    request_headers_dict_0 = module_1.RequestHeadersDict(**session_0)
    assert len(request_headers_dict_0) == 3
    dict_0 = {str_0: str_0}
    request_headers_dict_1 = module_1.RequestHeadersDict(**dict_0)
    session_1 = module_0.Session(str_0)
    assert session_1 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    none_type_0 = session_1.update_headers(request_headers_dict_1)
    assert len(request_headers_dict_1) == 1
    assert session_1 == {
        "headers": {"]saht": "]saht"},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5
    none_type_1 = session_1.load()
    assert none_type_1 is None
    session_1.update_headers(request_headers_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "&jon2Oc5WL"
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    none_type_0 = session_0.remove_cookies(str_0)
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5
    dict_0 = {str_0: none_type_0}
    request_headers_dict_0 = module_1.RequestHeadersDict(**dict_0)
    assert len(request_headers_dict_0) == 1
    session_1 = module_0.Session(str_0)
    assert session_1 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    none_type_1 = session_1.remove_cookies(request_headers_dict_0)
    assert none_type_1 is None
    none_type_2 = session_1.update_headers(request_headers_dict_0)
    assert none_type_2 is None
    session_2 = module_0.Session(str_0)
    assert session_2 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    none_type_3 = session_2.update_headers(request_headers_dict_0)
    assert none_type_3 is None
    str_1 = "AceFt"
    module_0.get_httpie_session(none_type_2, str_1, str_1, str_1)


def test_case_9():
    str_0 = "user-agent"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    request_headers_dict_0 = module_1.RequestHeadersDict(**dict_0)
    none_type_0 = session_0.update_headers(request_headers_dict_0)
    assert session_0 == {
        "headers": {"user-agent": "user-agent"},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert len(request_headers_dict_0) == 1
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "a\\V>"
    str_1 = "cookie"
    session_0 = module_0.Session(str_1)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    str_2 = "D=aM9ZYI|eA"
    session_1 = module_0.Session(str_2)
    assert session_1 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    str_3 = "user-agent"
    dict_0 = {
        str_2: str_3,
        str_2: str_1,
        str_3: session_0,
        str_3: str_3,
        str_2: str_0,
        str_3: str_3,
        str_3: str_3,
        str_3: str_3,
        str_1: str_2,
    }
    none_type_0 = session_0.remove_cookies(str_3)
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5
    request_headers_dict_0 = module_1.RequestHeadersDict()
    assert len(request_headers_dict_0) == 0
    request_headers_dict_1 = module_1.RequestHeadersDict(dict_0, **session_0)
    assert len(request_headers_dict_1) == 6
    session_1.update_headers(request_headers_dict_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "a\\VD)+->B"
    str_1 = "Content-Encoding"
    session_0 = module_0.Session(str_0)
    assert session_0 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert module_0.SESSIONS_DIR_NAME == "sessions"
    assert module_0.SESSION_IGNORED_HEADER_PREFIXES == ["Content-", "If-"]
    assert module_0.Session.helpurl == "https://httpie.org/doc#sessions"
    assert module_0.Session.about == "HTTPie session file"
    session_1 = module_0.Session(str_0)
    assert session_1 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    str_2 = 'C.F<`jf\\XS"r^d5Mp1"M'
    session_2 = module_0.Session(str_2)
    assert session_2 == {
        "headers": {},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    str_3 = "user-agent"
    dict_0 = {
        str_2: str_1,
        str_3: str_3,
        str_2: str_0,
        str_3: str_3,
        str_3: str_3,
        str_3: str_3,
        str_3: str_3,
        str_1: str_2,
    }
    request_headers_dict_0 = module_1.RequestHeadersDict(**dict_0)
    none_type_0 = session_1.update_headers(request_headers_dict_0)
    assert session_1 == {
        "headers": {'C.F<`jf\\XS"r^d5Mp1"M': "a\\VD)+->B", "user-agent": "user-agent"},
        "cookies": {},
        "auth": {"type": None, "username": None, "password": None},
    }
    assert len(request_headers_dict_0) == 3
    assert none_type_0 is None
    assert len(module_0.plugin_manager) == 5
    none_type_0.set_cookie_if_ok(dict_0, str_3)
